{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthResponseData",
            "id": "interface-AuthResponseData-a7b5073d93cd88f09e62a8ee6687f9efc129aa7cb4c2f9a0f325360e0575dd5d67ab8aed9001e8a8829771055711365ec90ca6a2067694f794b314990c1edfc3",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { BehaviorSubject, throwError } from \"rxjs\";\r\nimport { User } from \"./user.modal\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ServiceConstants } from \"../shared/service-constants\";\r\n\r\nexport interface AuthResponseData {\r\n    userId: string,\r\n    email: string,\r\n    expiresIn: number,\r\n    token: string\r\n}\r\nexport interface CreateResponseData {\r\n    userId: string\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n\r\n    user = new BehaviorSubject<User>(null);\r\n    private tokenExpirationTimer: any;\r\n\r\n    constructor(private http: HttpClient,\r\n        private serviceConstants: ServiceConstants,\r\n        private router: Router) { }\r\n\r\n    logout() {        \r\n        this.user.next(null);\r\n        localStorage.removeItem('userData');\r\n        this.router.navigate(['/auth']);\r\n        if(this.tokenExpirationTimer) {\r\n            clearTimeout(this.tokenExpirationTimer);\r\n        }\r\n        this.tokenExpirationTimer = null;\r\n    }\r\n\r\n    autoLogout(expiratonDuration: number) {\r\n        this.tokenExpirationTimer = setTimeout(() => this.logout(), expiratonDuration);\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        const postData = { email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json', ChangeOrigin: 'true' });\r\n        return this.http.post<AuthResponseData>(this.serviceConstants.login, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError), tap(resData => {\r\n                this.handleAuthentication(resData.userId, resData.email, resData.token, +resData.expiresIn);\r\n            }));\r\n    }\r\n\r\n    signUp(firstname: string, lastname: string, email: string, password: string) {\r\n        const postData = { firstName: firstname, lastName: lastname, email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json'/* , Authorization: 'Bearer  eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0QHRlc3QuY29tIiwiZXhwIjoxNjIxMjY2NzQxfQ.K1zfpCRYJH1xkl48dt1BPBT8hXj4Ad4lwG3kxozpi7BCwK02AeEGxNOdYY2nUnYuSIplyGqCaTyEUP7VJ1zOKA'  */});\r\n        return this.http.post<CreateResponseData>(this.serviceConstants.createuser, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError));\r\n    }\r\n\r\n    private handleError(errorRes: HttpErrorResponse) {\r\n        let errorMessage = \"An unknown error occured!\"\r\n        switch (errorRes.status) {\r\n            case 403:\r\n                errorMessage = \"Incorrect Credentials\";\r\n                break;\r\n            case 500:\r\n                errorMessage = \"Email Already Exists\";\r\n                break;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n    private handleAuthentication(id: string, email: string, token: string, expiresIn: number) {\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn);\r\n        const user = new User(id, email, token, expirationDate);\r\n        this.user.next(user);\r\n        this.autoLogout(expiresIn);\r\n        localStorage.setItem('userData', JSON.stringify(user));\r\n    }\r\n\r\n    autoLogin() {\r\n        const userData: {\r\n            email: string;\r\n            userId: string;\r\n            _token: string;\r\n            expiresIn: string;\r\n        } = JSON.parse(localStorage.getItem('userData'));\r\n        if (!userData) return;\r\n\r\n        const loadedUser = new User(userData.userId, userData.email, userData._token, new Date(userData.expiresIn));\r\n\r\n        if (loadedUser.token) {\r\n            this.user.next(loadedUser);\r\n            const expirationDuration = new Date(userData.expiresIn).getTime() - new Date().getTime();\r\n            this.autoLogout(expirationDuration);\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CreateResponseData",
            "id": "interface-CreateResponseData-a7b5073d93cd88f09e62a8ee6687f9efc129aa7cb4c2f9a0f325360e0575dd5d67ab8aed9001e8a8829771055711365ec90ca6a2067694f794b314990c1edfc3",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { BehaviorSubject, throwError } from \"rxjs\";\r\nimport { User } from \"./user.modal\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ServiceConstants } from \"../shared/service-constants\";\r\n\r\nexport interface AuthResponseData {\r\n    userId: string,\r\n    email: string,\r\n    expiresIn: number,\r\n    token: string\r\n}\r\nexport interface CreateResponseData {\r\n    userId: string\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n\r\n    user = new BehaviorSubject<User>(null);\r\n    private tokenExpirationTimer: any;\r\n\r\n    constructor(private http: HttpClient,\r\n        private serviceConstants: ServiceConstants,\r\n        private router: Router) { }\r\n\r\n    logout() {        \r\n        this.user.next(null);\r\n        localStorage.removeItem('userData');\r\n        this.router.navigate(['/auth']);\r\n        if(this.tokenExpirationTimer) {\r\n            clearTimeout(this.tokenExpirationTimer);\r\n        }\r\n        this.tokenExpirationTimer = null;\r\n    }\r\n\r\n    autoLogout(expiratonDuration: number) {\r\n        this.tokenExpirationTimer = setTimeout(() => this.logout(), expiratonDuration);\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        const postData = { email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json', ChangeOrigin: 'true' });\r\n        return this.http.post<AuthResponseData>(this.serviceConstants.login, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError), tap(resData => {\r\n                this.handleAuthentication(resData.userId, resData.email, resData.token, +resData.expiresIn);\r\n            }));\r\n    }\r\n\r\n    signUp(firstname: string, lastname: string, email: string, password: string) {\r\n        const postData = { firstName: firstname, lastName: lastname, email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json'/* , Authorization: 'Bearer  eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0QHRlc3QuY29tIiwiZXhwIjoxNjIxMjY2NzQxfQ.K1zfpCRYJH1xkl48dt1BPBT8hXj4Ad4lwG3kxozpi7BCwK02AeEGxNOdYY2nUnYuSIplyGqCaTyEUP7VJ1zOKA'  */});\r\n        return this.http.post<CreateResponseData>(this.serviceConstants.createuser, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError));\r\n    }\r\n\r\n    private handleError(errorRes: HttpErrorResponse) {\r\n        let errorMessage = \"An unknown error occured!\"\r\n        switch (errorRes.status) {\r\n            case 403:\r\n                errorMessage = \"Incorrect Credentials\";\r\n                break;\r\n            case 500:\r\n                errorMessage = \"Email Already Exists\";\r\n                break;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n    private handleAuthentication(id: string, email: string, token: string, expiresIn: number) {\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn);\r\n        const user = new User(id, email, token, expirationDate);\r\n        this.user.next(user);\r\n        this.autoLogout(expiresIn);\r\n        localStorage.setItem('userData', JSON.stringify(user));\r\n    }\r\n\r\n    autoLogin() {\r\n        const userData: {\r\n            email: string;\r\n            userId: string;\r\n            _token: string;\r\n            expiresIn: string;\r\n        } = JSON.parse(localStorage.getItem('userData'));\r\n        if (!userData) return;\r\n\r\n        const loadedUser = new User(userData.userId, userData.email, userData._token, new Date(userData.expiresIn));\r\n\r\n        if (loadedUser.token) {\r\n            this.user.next(loadedUser);\r\n            const expirationDuration = new Date(userData.expiresIn).getTime() - new Date().getTime();\r\n            this.autoLogout(expirationDuration);\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-a7b5073d93cd88f09e62a8ee6687f9efc129aa7cb4c2f9a0f325360e0575dd5d67ab8aed9001e8a8829771055711365ec90ca6a2067694f794b314990c1edfc3",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "tokenExpirationTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject<User>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "autoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autoLogout",
                    "args": [
                        {
                            "name": "expiratonDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expiratonDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAuthentication",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "errorRes",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorRes",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError, tap } from \"rxjs/operators\";\r\nimport { BehaviorSubject, throwError } from \"rxjs\";\r\nimport { User } from \"./user.modal\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ServiceConstants } from \"../shared/service-constants\";\r\n\r\nexport interface AuthResponseData {\r\n    userId: string,\r\n    email: string,\r\n    expiresIn: number,\r\n    token: string\r\n}\r\nexport interface CreateResponseData {\r\n    userId: string\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n\r\n    user = new BehaviorSubject<User>(null);\r\n    private tokenExpirationTimer: any;\r\n\r\n    constructor(private http: HttpClient,\r\n        private serviceConstants: ServiceConstants,\r\n        private router: Router) { }\r\n\r\n    logout() {        \r\n        this.user.next(null);\r\n        localStorage.removeItem('userData');\r\n        this.router.navigate(['/auth']);\r\n        if(this.tokenExpirationTimer) {\r\n            clearTimeout(this.tokenExpirationTimer);\r\n        }\r\n        this.tokenExpirationTimer = null;\r\n    }\r\n\r\n    autoLogout(expiratonDuration: number) {\r\n        this.tokenExpirationTimer = setTimeout(() => this.logout(), expiratonDuration);\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        const postData = { email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json', ChangeOrigin: 'true' });\r\n        return this.http.post<AuthResponseData>(this.serviceConstants.login, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError), tap(resData => {\r\n                this.handleAuthentication(resData.userId, resData.email, resData.token, +resData.expiresIn);\r\n            }));\r\n    }\r\n\r\n    signUp(firstname: string, lastname: string, email: string, password: string) {\r\n        const postData = { firstName: firstname, lastName: lastname, email: email, password: password };\r\n        let headers = new HttpHeaders({ Accept: 'application/json'/* , Authorization: 'Bearer  eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0QHRlc3QuY29tIiwiZXhwIjoxNjIxMjY2NzQxfQ.K1zfpCRYJH1xkl48dt1BPBT8hXj4Ad4lwG3kxozpi7BCwK02AeEGxNOdYY2nUnYuSIplyGqCaTyEUP7VJ1zOKA'  */});\r\n        return this.http.post<CreateResponseData>(this.serviceConstants.createuser, postData,\r\n            {\r\n                headers: headers\r\n            }).pipe(catchError(this.handleError));\r\n    }\r\n\r\n    private handleError(errorRes: HttpErrorResponse) {\r\n        let errorMessage = \"An unknown error occured!\"\r\n        switch (errorRes.status) {\r\n            case 403:\r\n                errorMessage = \"Incorrect Credentials\";\r\n                break;\r\n            case 500:\r\n                errorMessage = \"Email Already Exists\";\r\n                break;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n    private handleAuthentication(id: string, email: string, token: string, expiresIn: number) {\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn);\r\n        const user = new User(id, email, token, expirationDate);\r\n        this.user.next(user);\r\n        this.autoLogout(expiresIn);\r\n        localStorage.setItem('userData', JSON.stringify(user));\r\n    }\r\n\r\n    autoLogin() {\r\n        const userData: {\r\n            email: string;\r\n            userId: string;\r\n            _token: string;\r\n            expiresIn: string;\r\n        } = JSON.parse(localStorage.getItem('userData'));\r\n        if (!userData) return;\r\n\r\n        const loadedUser = new User(userData.userId, userData.email, userData._token, new Date(userData.expiresIn));\r\n\r\n        if (loadedUser.token) {\r\n            this.user.next(loadedUser);\r\n            const expirationDuration = new Date(userData.expiresIn).getTime() - new Date().getTime();\r\n            this.autoLogout(expirationDuration);\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceConstants",
                        "type": "ServiceConstants",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceConstants",
                        "type": "ServiceConstants",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataStorageService",
            "id": "injectable-DataStorageService-aac4ea3c3f89b745eae71f99441977d26cae0b5fce8108037f3320fbd0e83322be1276d3800a819f7c9c8720064a99de58c4627f228ca25ceea66e2b531d3c5e",
            "file": "src/app/shared/data-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "storeRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpEventType, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Recipe } from \"../recipes/recipe.model\";\r\nimport { RecipeService } from \"../recipes/recipe.service\";\r\nimport { map, tap, take, exhaustMap } from 'rxjs/operators';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { ServiceConstants } from './service-constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataStorageService {\r\n\r\n    constructor(private http: HttpClient,\r\n        private recipeService: RecipeService,\r\n        private serviceConstant: ServiceConstants,\r\n        private authService: AuthService) { }\r\n\r\n    storeRecipes() {\r\n        const postData = this.recipeService.getRecipes();\r\n        let headers = new HttpHeaders({\r\n            Accept: 'application/json'\r\n            //Authorization: 'Bearer  eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0QHRlc3QuY29tIiwiZXhwIjoxNjIxNTExNjI2fQ.lvlOzAPmnxbY2L1n5JybCeo-LlTgNP40PB3aqx5rvfyX2Wj4SqwXz_2RkQu4nCVSDZldjJXWPpG7gTPwM8NnOA'\r\n        });\r\n        this.http.post(this.serviceConstant.saveRecipes, postData,\r\n            {\r\n                headers: headers\r\n            })\r\n            .subscribe(response => {\r\n                console.log(response);\r\n            });\r\n    }\r\n\r\n    fetchRecipes() {\r\n        //const postData = this.recipeService.getRecipes();\r\n        let headers = new HttpHeaders({\r\n            Accept: 'application/json'\r\n        });\r\n\r\n        /* return this.authService.user.pipe(take(1),\r\n            exhaustMap(user => {\r\n                return this.http.get<Recipe[]>(\"http://localhost:8080/recipes\");\r\n            }),\r\n            map(recipes => {\r\n                return recipes.map(recipe => {\r\n                    return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }\r\n                });\r\n            }),\r\n            tap((recipes: Recipe[]) => {\r\n                this.recipeService.setRecipes(recipes);\r\n            })\r\n        ); */\r\n        \r\n        return this.http.get<Recipe[]>(this.serviceConstant.fetchRecipes, { headers }).pipe(\r\n            map(recipes => {\r\n                return recipes.map(recipe => {\r\n                    return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }\r\n                });\r\n            }),\r\n            tap((recipes: Recipe[]) => {\r\n                this.recipeService.setRecipes(recipes);\r\n            })\r\n        );\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceConstant",
                        "type": "ServiceConstants",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceConstant",
                        "type": "ServiceConstants",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecipeService",
            "id": "injectable-RecipeService-ec5ada77b63cf03d52ad9a7be0202c97801d53bc684874ee7b10582ded3a07e05e739fc90533331e0faa0668fada7c3b538d0f85fb9fe21ec99770b9af433f06",
            "file": "src/app/recipes/recipe.service.ts",
            "properties": [
                {
                    "name": "recipes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "recipesChanged",
                    "defaultValue": "new Subject<Recipe[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "addIngredientsToShoppingList",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRecipes",
                    "args": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Ingredient } from \"../shared/ingredient.model\";\r\nimport { ShoppingListService } from \"../shopping-list/shopping-list.service\";\r\nimport { Recipe } from \"./recipe.model\";\r\n\r\n@Injectable(/* { providedIn: 'root' } */)\r\nexport class RecipeService {\r\n\r\n    recipesChanged = new Subject<Recipe[]>();\r\n\r\n    /* private recipes: Recipe[] = [\r\n        new Recipe('Dosa', 'Simply a test Image', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSsDhPIQtwv5Fe78NQNvus7L1MRNT3fCOAVPw&usqp=CAU',\r\n            [\r\n                new Ingredient('Rice', 1),\r\n                new Ingredient('Potato', 2)\r\n            ]),\r\n        new Recipe('Samosa', 'Another test Image', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTkSykAngJdnsma5jZFB4mmnieLz1PLO8rU7Q&usqp=CAU',\r\n            [\r\n                new Ingredient('Potato', 3),\r\n                new Ingredient('Flour', 2)\r\n            ]),\r\n        new Recipe('Chole', 'Another recipe test Image', 'https://s3-eu-west-1.amazonaws.com/uploads.playbaamboozle.com/uploads/images/97330/1603866032_115515',\r\n            [\r\n                new Ingredient('Chana', 4),\r\n                new Ingredient('Chole Mix', 3)\r\n            ]),\r\n        new Recipe('Pakode', 'Sukhis', 'https://sukhis.com/wp-content/uploads/2017/06/Appetizers.jpg',\r\n            [\r\n                new Ingredient('Potato', 4),\r\n                new Ingredient('Tomato', 5),\r\n                new Ingredient('Masala Mix', 3)\r\n            ])\r\n    ]; */\r\n\r\n    private recipes: Recipe[] = [];\r\n\r\n    constructor(private slService: ShoppingListService) { }\r\n\r\n    getRecipes() {\r\n        return this.recipes.slice();\r\n    }\r\n\r\n    addIngredientsToShoppingList(ingredients: Ingredient[]) {\r\n        this.slService.addIngredients(ingredients);\r\n    }\r\n\r\n    getRecipe(index: number) {\r\n        return this.recipes[index];\r\n    }\r\n\r\n    addRecipe(recipe: Recipe) {\r\n        this.recipes.push(recipe);\r\n        this.recipesChanged.next(this.recipes.slice());\r\n    }\r\n    \r\n    updateRecipe(index: number, newRecipe: Recipe) {\r\n        this.recipes[index] = newRecipe;\r\n        this.recipesChanged.next(this.recipes.slice());\r\n    }\r\n    \r\n    deleteRecipe(index: number){\r\n        this.recipes.splice(index, 1);\r\n        this.recipesChanged.next(this.recipes.slice());\r\n    }\r\n    \r\n    setRecipes(recipes: Recipe[]) {\r\n        this.recipes = recipes;\r\n        this.recipesChanged.next(this.recipes.slice());\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListService",
            "id": "injectable-ShoppingListService-c345b05e37f48df4a522e9ed4ec5086796667443994f993abdc34d131c9e01c2b461034e16311284ef3df00e7d02920a44851c14166db38e318dac610b9c0820",
            "file": "src/app/shopping-list/shopping-list.service.ts",
            "properties": [
                {
                    "name": "ingredientChanged",
                    "defaultValue": "new Subject<Ingredient[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ingredients",
                    "defaultValue": "[\r\n        new Ingredient('Bread', 5),\r\n        new Ingredient('Butter', 2)\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "startedEditing",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "addIngredient",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addIngredients",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredients",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Ingredient } from \"../shared/ingredient.model\";\r\n\r\n@Injectable(/*{ providedIn: 'root'} */)\r\nexport class ShoppingListService {\r\n    ingredientChanged = new Subject<Ingredient[]>();\r\n    startedEditing = new Subject<number>();\r\n\r\n    private ingredients: Ingredient[] = [\r\n        new Ingredient('Bread', 5),\r\n        new Ingredient('Butter', 2)\r\n    ];\r\n\r\n    getIngredients() {\r\n        return this.ingredients.slice();\r\n    }\r\n\r\n    getIngredient(index: number) {\r\n        return this.ingredients[index];\r\n    }\r\n\r\n    addIngredient(ingredient: Ingredient) {\r\n        this.ingredients.push(ingredient);\r\n        this.ingredientChanged.next(this.ingredients.slice());\r\n    }\r\n\r\n    addIngredients(ingredients: Ingredient[]) {\r\n        this.ingredients.push(...ingredients);\r\n        this.ingredientChanged.next(this.ingredients.slice());\r\n    }\r\n\r\n    updateIngredient(index: number, newIngredient: Ingredient) {\r\n        this.ingredients[index] = newIngredient;\r\n        this.ingredientChanged.next(this.ingredients.slice());\r\n    }\r\n\r\n    deleteIngredient(index: number) {\r\n        this.ingredients.splice(index);\r\n        this.ingredientChanged.next(this.ingredients.slice());\r\n    }\r\n\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-c6d31b959f1e8b1cecf45bf2e863f122a2c07560ecbd77a7bedbc3adc9943441539c07e63be3c04f4aedc290e897fe71a72d6945e9af9185b49da12cc563de83",
            "file": "src/app/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | Promise | Observable | UrlTree",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, take, tap } from \"rxjs/operators\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    constructor(private authService: AuthService,\r\n        private router: Router) { }\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): boolean | Promise<boolean | UrlTree> | Observable<boolean | UrlTree> | UrlTree {\r\n        return this.authService.user.pipe(\r\n            take(1),\r\n            map(user => {\r\n            const isAuth = !!user;\r\n            if (isAuth) {return true};\r\n            return this.router.createUrlTree(['/auth']);\r\n        }),\r\n            // tap(isAuth => {\r\n            //     if (!isAuth) {\r\n            //         this.router.navigate(['/auth']);\r\n            //     }\r\n            // })\r\n        );\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "RecipesResolverService",
            "id": "injectable-RecipesResolverService-62059660663ee655f02b5b75fbc2681ffa503aa6b5dca5da48046e2da735029c2fa3bc7eebc615ff544cac86d7472536fd16bf99b4023b3bf9bdad0f83ca3a5a",
            "file": "src/app/recipes/recipes-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, Resolve, RouterState, RouterStateSnapshot } from \"@angular/router\";\r\nimport { DataStorageService } from \"../shared/data-storage.service\";\r\nimport { Recipe } from \"./recipe.model\";\r\nimport { RecipeService } from \"./recipe.service\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class RecipesResolverService implements Resolve<Recipe[]>{\r\n    \r\n    constructor(private dataStorageService: DataStorageService, private recipeService: RecipeService) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const recipes = this.recipeService.getRecipes();\r\n        return recipes.length === 0 ? this.dataStorageService.fetchRecipes() : recipes;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptorService",
            "id": "injectable-AuthInterceptorService-a431590f34ef6c81ac66dbfde61a1177658818c98c791ce47a70cb849c2ca29a4aad06d746d10bc1b9c19aabd432a444dac735b5dbd9863bcfbf9e3b8ba9dec7",
            "file": "src/app/auth/auth.interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHandler, HttpInterceptor, HttpParams, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { exhaustMap, take } from \"rxjs/operators\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n    constructor(private authService: AuthService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        return this.authService.user.pipe(\r\n            take(1),\r\n            exhaustMap(user => {\r\n                if(!user) {\r\n                    return next.handle(req);\r\n                }\r\n                //const modifiedReq = req.clone({params: new HttpParams().set('Authorization', user.token)});\r\n                const clonedRequest = req.clone({ headers: req.headers.append('Authorization', user.token) });\r\n                return next.handle(clonedRequest);\r\n            })\r\n        );\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppConstant",
            "id": "class-AppConstant-b3d316d95a35ad73cc9a5bc398785a5e3a79facfe84d5c954654b39401e66fcb894d5d8caa11e3026ab522306d0dfb8e059475c1089ebe5b06c936fc3fee9c33",
            "file": "src/app/shared/app-constant.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AppConstant {\r\n    readonly RECIPE = 'recipe';\r\n    readonly SHOPPING_LIST = 'shopping-list';\r\n\r\n    \r\n}",
            "properties": [
                {
                    "name": "RECIPE",
                    "defaultValue": "'recipe'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "SHOPPING_LIST",
                    "defaultValue": "'shopping-list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Ingredient",
            "id": "class-Ingredient-809151c80c77319379ac178dfa765283347823e30c7b0f775da558f313863c0230444676ae35adea72d0e04e4dfd1559b25e1b030b9e9b13ab91958284591045",
            "file": "src/app/shared/ingredient.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Ingredient {\r\n    /* public name: string;\r\n    public amount: number;\r\n\r\n    constructor(name, amount) {\r\n        this.name = name;\r\n        this.amount = amount;\r\n    } */\r\n\r\n    constructor(public name: string, public amount: number) { }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoggingService",
            "id": "class-LoggingService-0406e6c8f7b76f569833a45155b927afaf4c8a949dd20961e93b94883e51ec105bf4a5f940565077bccf58fa892afb3051aa73c702858ff76d0deddede13261c",
            "file": "src/app/logging.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\n\r\n//@Injectable({ providedIn: 'root' })\r\nexport class LoggingService {\r\n    lastlog: string;\r\n\r\n    printLog(message: string) {\r\n        console.log(message);\r\n        console.log(this.lastlog);\r\n        this.lastlog = message;\r\n    }\r\n    \r\n}",
            "properties": [
                {
                    "name": "lastlog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "printLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Recipe",
            "id": "class-Recipe-5f3096c12d13753557331b40469dc696b8724a24d3b46a51a9dff2e7bc927e452a0577c190b639847e6797064dc753c040c067eac86ac0dcedba7bc026e72de0",
            "file": "src/app/recipes/recipe.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Ingredient } from \"../shared/ingredient.model\";\r\n\r\nexport class Recipe {\r\n    public name: string;\r\n    public description: string;\r\n    public imagePath: string;\r\n    public ingredients: Ingredient[];\r\n\r\n    constructor(name: string, desc: string, imagepath: string, ingredients: Ingredient[]) {\r\n        this.name = name;\r\n        this.description = desc;\r\n        this.imagePath = imagepath;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    reset() {\r\n        this.name = '';\r\n        this.description = '';\r\n        this.imagePath = '';\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "desc",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imagepath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "desc",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imagepath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServiceConstants",
            "id": "class-ServiceConstants-5c8b8b5c9c2f1027a08762110800190ef39dd02e77a62190e6bce4f99149215a7c33f9a48abaefb4b60bbf73ade739f22fabb525d47db94035b8f1da17dd41fd",
            "file": "src/app/shared/service-constants.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ServiceConstants {\r\n    readonly login = 'http://localhost:8080/recipe/users/login';\r\n    readonly createuser = 'http://localhost:8080/recipe/users';\r\n    readonly saveRecipes = 'http://localhost:8080/recipe/recipes';\r\n    readonly fetchRecipes = 'http://localhost:8080/recipe/recipes';\r\n}\r\n\r\n// Changed URL's",
            "properties": [
                {
                    "name": "createuser",
                    "defaultValue": "'http://localhost:8080/recipe/users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "fetchRecipes",
                    "defaultValue": "'http://localhost:8080/recipe/recipes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "login",
                    "defaultValue": "'http://localhost:8080/recipe/users/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "saveRecipes",
                    "defaultValue": "'http://localhost:8080/recipe/recipes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-92cb34f0e82f36c0226a7e28ce0da126323f08693b1840a9a6ae74bf9b262c6951ac8683b3fcfbd841f669f4b81fc8fc0c07271a2257d7c7faa6fe183e0f45b3",
            "file": "src/app/auth/user.modal.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n    constructor(\r\n        public userId: string,\r\n        public _email: string, \r\n        private _token: string,\r\n        public expiresIn: Date\r\n    ) {}\r\n\r\n    get token() {\r\n        if(!this.expiresIn || new Date() > this.expiresIn) return null;\r\n        return this._token;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expiresIn",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expiresIn",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-6ffe5649494c88f7a430b0950de0983c0173d17a5bd14092724188cca6cbbb4a1bbbef74446f2d5a4ce4c1ecfd3feb45c09ccd9440b249637819307ec31e96e8",
            "file": "src/app/shared/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, HostListener } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: '[appDropdown]'\r\n})\r\nexport class DropdownDirective {\r\n    \r\n    \r\n    // Using click\r\n    \r\n    @HostBinding('class.open') isOpen = false;\r\n    @HostListener('click') toggleOpen() {\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n\r\n    /* // Using mouse hover\r\n\r\n    @HostBinding('class.open') isOpen = false;\r\n\r\n    @HostListener('mouseenter')\r\n    onMouseEnter() {\r\n        this.isOpen = true;\r\n    }\r\n\r\n    @HostListener('mouseleave')\r\n    onMouseLeave() {\r\n        this.isOpen = false;\r\n    } */\r\n}",
            "selector": "[appDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.open'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ]
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-e7b410e3aec9aeeb64f55faff2d66aa2e0be8639d1ba9c0512bcc9ab98a75ac03dd2440fe47c802dbbb1739ce0a143d6c1435ac6ed7acdb5c69a485c8750b498",
            "file": "src/app/shared/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-alert',\r\n    templateUrl: './alert.component.html',\r\n    styleUrls: ['./alert.component.css']\r\n})\r\nexport class AlertComponent {\r\n    @Input() message: string;\r\n    @Output() close = new EventEmitter<void>();\r\n\r\n    onClose() {\r\n        this.close.emit();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".backdrop {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: rgba(0,0,0,0.75);\r\n    z-index: 50;\r\n}\r\n\r\n.alert-box {\r\n    position: fixed;\r\n    top: 30vh;\r\n    left: 20vw;\r\n    width: 60vw;\r\n    padding: 16px;\r\n    z-index: 100;\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.26);\r\n    background: white;\r\n}\r\n\r\n.alert-box-actions {\r\n    text-align: right;\r\n}",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"backdrop\" (click)=\"onClose()\"></div>\r\n<div class=\"alert-box\">\r\n    <P>{{ message }}</P>\r\n    <div class=\"alert-box-actions\">\r\n        <button class=\"btn btn-primary\" (click)=\"onClose()\">Close</button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c512589a7656ec820393eebd3f23c81e08f2da59d26b9acda34ed5f0866486a1872e6d392530a2226b665697574a60433f4adf614b3996009c01ae9688a3b6f3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recipe_lbl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "shoppingList_lbl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'my-first-project'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\nimport { LoggingService } from './logging.service';\nimport { AppConstant } from './shared/app-constant';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n\n  recipe_lbl: string;\n  shoppingList_lbl: string;\n  \n  constructor(private appConstant: AppConstant,\n    private authService: AuthService) {}\n\n  ngOnInit() {\n    this.recipe_lbl = this.appConstant.RECIPE;\n    this.shoppingList_lbl = this.appConstant.SHOPPING_LIST;\n\n    this.authService.autoLogin();\n  }\n\n  title = 'my-first-project';\n  \n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConstant",
                        "type": "AppConstant",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "appConstant",
                        "type": "AppConstant",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-header></app-header>\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <!-- <app-recipes *ngIf=\"loadedFeature === recipe_lbl\"></app-recipes>\n            <app-shopping-list *ngIf=\"loadedFeature !== recipe_lbl\"></app-shopping-list> -->\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-a0488602cc8867c66bdfaa9931e845f2027ca7f2163e5b4b97e4e823613d8af9491cafb0dca4e1346c3ef047f019c3a03df42e0aab08f1b65b490421cd680201",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isLoginMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHandleError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSwitchMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { Form, NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService, AuthResponseData } from \"./auth.service\";\r\n\r\n@Component({\r\n    selector: 'app-auth',\r\n    templateUrl: './auth.component.html'\r\n})\r\nexport class AuthComponent implements OnInit {\r\n    isLoginMode = true;\r\n    isLoading = false;\r\n    error: string = null;\r\n\r\n    constructor(private authService: AuthService, private router: Router) { }\r\n\r\n    ngOnInit() {\r\n        \r\n    }\r\n    onSwitchMode() {\r\n        this.isLoginMode = !this.isLoginMode;\r\n    }\r\n\r\n    onSubmit(form: NgForm) {\r\n        if (!form.valid) {\r\n            return;\r\n        }\r\n        const firstname = form.value.firstname;\r\n        const lastname = form.value.lastname;\r\n        const email = form.value.email;\r\n        const password = form.value.password;\r\n\r\n        let authObs: Observable<any>;\r\n\r\n        this.isLoading = true;\r\n        if (this.isLoginMode === true) {\r\n            authObs = this.authService.login(email, password);\r\n        } else {\r\n            authObs = this.authService.signUp(firstname, lastname, email, password);            \r\n        }\r\n        \r\n        authObs.subscribe(\r\n            (data) => {\r\n                this.isLoading = false;\r\n                this.error = null;\r\n                this.router.navigate(['/recipes']);\r\n            },\r\n            errorMessage => {\r\n                this.error = errorMessage;\r\n                this.isLoading = false;\r\n            }\r\n        );\r\n\r\n        form.reset();\r\n    }\r\n\r\n    onHandleError() {\r\n        this.error = null;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n    <div class=\"col-xs-12 col-md-6 col-md-offset-3\">\r\n        <!-- <div class=\"alert alert-danger\" *ngIf=\"error\">\r\n            <p>{{error}}</p>\r\n        </div> -->\r\n        <app-alert [message]=\"error\" (close)=\"onHandleError()\" *ngIf=\"error\"></app-alert>\r\n        <div *ngIf=\"isLoading\" style=\"text-align: center;\">\r\n            <app-loading-spinner></app-loading-spinner>\r\n        </div>\r\n        <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\">\r\n            <div class=\"form-group\" *ngIf=\"!isLoginMode\">\r\n                <label for=\"firstname\">FirstName</label>\r\n                <input type=\"firstname\" class=\"form-control\" ngModel name=\"firstname\" required minlength=\"3\" >\r\n            </div>\r\n            <div class=\"form-group\" *ngIf=\"!isLoginMode\">\r\n                <label for=\"lastname\">LastName</label>\r\n                <input type=\"lastname\" class=\"form-control\" ngModel name=\"lastname\" required minlength=\"3\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">E-Mail</label>\r\n                <input type=\"email\" class=\"form-control\" ngModel name=\"email\" required email >\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" class=\"form-control\" ngModel name=\"password\" required minlength=\"6\">\r\n            </div>\r\n            <div>\r\n                <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\">{{ isLoginMode ? 'Login': 'Sign Up'}}</button> | \r\n                <button class=\"btn btn-primary\" type=\"button\" (click)=\"onSwitchMode()\">{{ isLoginMode ? 'Sign Up': 'Login'}}</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "GetNameComponent",
            "id": "component-GetNameComponent-e0baff25f40246c3b34e67d4dd77f162e18a6bf45f51ee592d3650b1b683e1329c6c753fb53d31e14a17ab1ea3cc4da85eff95033d765c8f0e1a15aeeaa9ef0d",
            "file": "src/app/shared/get-name/get-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-get-name",
            "styleUrls": [
                "./get-name.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./get-name.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "myEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-get-name',\n  templateUrl: './get-name.component.html',\n  styleUrls: ['./get-name.component.css']\n})\nexport class GetNameComponent implements OnInit {\n\n  @Input() name: string;\n  @Output() myEvent: EventEmitter<any> = new EventEmitter();\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./get-name.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>hello, my name is {{name}}!</p>\n<button (click)=\"myEvent.next()\">Click me please</button>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0b835352730369a5f0b40550b90c010eb192fc1bc6b9508201c8aa6ded699cc69305888550a23cf06bf940579bd8405d17e2b51f343dd2ac6b7e73caa51b9751-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "featureSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "recipe_lbl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "shoppingList_lbl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth/auth.service';\nimport { AppConstant } from '../shared/app-constant';\nimport { DataStorageService } from '../shared/data-storage.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  @Output() featureSelected = new EventEmitter<string>();\n  private userSub: Subscription;\n  isAuthenticated = false;\n\n  constructor(private appConstant: AppConstant,\n    private dataStorageService: DataStorageService,\n    private authService: AuthService) { }\n\n  recipe_lbl: string;\n  shoppingList_lbl: string;\n\n  ngOnInit(): void {\n    this.recipe_lbl = this.appConstant.RECIPE;\n    this.shoppingList_lbl = this.appConstant.SHOPPING_LIST;\n\n    this.userSub = this.authService.user.subscribe(\n      (user) => {\n        //this.isAuthenticated = !user ? false : true;\n        this.isAuthenticated = !!user;\n      }\n    );\n  }\n\n  onSaveData() {\n    this.dataStorageService.storeRecipes();\n  }\n  \n  onFetchData() {\n    this.dataStorageService.fetchRecipes().subscribe();\n  }\n\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConstant",
                        "type": "AppConstant",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "appConstant",
                        "type": "AppConstant",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nav class=\"navbar navbar-default\" role=\"navigation\">\r\n    <!-- Brand and toggle get grouped for better mobile display -->\r\n    <div class=\"navbar-header\">\r\n        <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-ex1-collapse\">\r\n            <span class=\"sr-only\">Toggle navigation</span>\r\n            <span class=\"icon-bar\"></span>\r\n            <span class=\"icon-bar\"></span>\r\n            <span class=\"icon-bar\"></span>\r\n        </button>\r\n        <a class=\"navbar-brand\" href=\"#\">Recipe Book</a>\r\n    </div>\r\n\r\n    <!-- Collect the nav links, forms, and other content for toggling -->\r\n    <div class=\"collapse navbar-collapse navbar-ex1-collapse\">\r\n        <ul class=\"nav navbar-nav\">\r\n            <!-- <li><a (click)=\"onSelect(recipe_lbl)\" href=\"#\">Recipes</a></li>\r\n            <li><a (click)=\"onSelect(shoppingList_lbl)\" href=\"#\">Shopping List</a></li> -->\r\n            <li routerLinkActive=\"active\"><a routerLink=\"/recipes\" *ngIf=\"isAuthenticated\">Recipes</a></li>\r\n            <li routerLinkActive=\"active\"><a routerLink=\"/auth\" *ngIf=\"!isAuthenticated\">Authenticate</a></li>\r\n            <li routerLinkActive=\"active\"><a routerLink=\"/shopping-list\">Shopping List</a></li>\r\n        </ul>\r\n        <!-- <form class=\"navbar-form navbar-left\" role=\"search\">\r\n            <div class=\"form-group\">\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n        </form> -->\r\n        <ul class=\"nav navbar-nav navbar-right\">\r\n            <li>\r\n                <a style=\"cursor: pointer;\" *ngIf=\"isAuthenticated\" (click)=\"onLogout()\">logout</a>\r\n            </li>\r\n            <!-- <li><a href=\"#\">Recipe Book</a></li> -->\r\n            <li *ngIf=\"isAuthenticated\" style=\"cursor: pointer;\" class=\"dropdown\" appDropdown>\r\n                <a class=\"dropdown-toggle\" data-toggle=\"dropdown\">Manage<b class=\"caret\"></b></a>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li><a style=\"cursor: pointer;\" (click)=\"onSaveData()\">Save Data</a></li>\r\n                    <li><a style=\"cursor: pointer;\" (click)=\"onFetchData()\">Fetch Data</a></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </div><!-- /.navbar-collapse -->\r\n</nav>\r\n"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-5db0cb28e1f1d85ad622a98f85efdc12a2b48c00714c91c4eb3941072d0ddc1296bb44ae1e8c12ed2ef373d30b50fe88ff06b5a09602ac183c254a2bf9657bef",
            "file": "src/app/shared/loading-spinner/loading-spinner.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [
                "./loading.spinner.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-loading-spinner',\r\n    templateUrl: './loading-spinner.html',\r\n    styleUrls: ['./loading.spinner.css']\r\n})\r\nexport class LoadingSpinnerComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-spinner {\r\n  color: official;\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px;\r\n}\r\n.lds-spinner div {\r\n  transform-origin: 40px 40px;\r\n  animation: lds-spinner 1.2s linear infinite;\r\n}\r\n.lds-spinner div:after {\r\n  content: \" \";\r\n  display: block;\r\n  position: absolute;\r\n  top: 3px;\r\n  left: 37px;\r\n  width: 6px;\r\n  height: 18px;\r\n  border-radius: 20%;\r\n  background: rgb(7, 7, 7);\r\n}\r\n.lds-spinner div:nth-child(1) {\r\n  transform: rotate(0deg);\r\n  animation-delay: -1.1s;\r\n}\r\n.lds-spinner div:nth-child(2) {\r\n  transform: rotate(30deg);\r\n  animation-delay: -1s;\r\n}\r\n.lds-spinner div:nth-child(3) {\r\n  transform: rotate(60deg);\r\n  animation-delay: -0.9s;\r\n}\r\n.lds-spinner div:nth-child(4) {\r\n  transform: rotate(90deg);\r\n  animation-delay: -0.8s;\r\n}\r\n.lds-spinner div:nth-child(5) {\r\n  transform: rotate(120deg);\r\n  animation-delay: -0.7s;\r\n}\r\n.lds-spinner div:nth-child(6) {\r\n  transform: rotate(150deg);\r\n  animation-delay: -0.6s;\r\n}\r\n.lds-spinner div:nth-child(7) {\r\n  transform: rotate(180deg);\r\n  animation-delay: -0.5s;\r\n}\r\n.lds-spinner div:nth-child(8) {\r\n  transform: rotate(210deg);\r\n  animation-delay: -0.4s;\r\n}\r\n.lds-spinner div:nth-child(9) {\r\n  transform: rotate(240deg);\r\n  animation-delay: -0.3s;\r\n}\r\n.lds-spinner div:nth-child(10) {\r\n  transform: rotate(270deg);\r\n  animation-delay: -0.2s;\r\n}\r\n.lds-spinner div:nth-child(11) {\r\n  transform: rotate(300deg);\r\n  animation-delay: -0.1s;\r\n}\r\n.lds-spinner div:nth-child(12) {\r\n  transform: rotate(330deg);\r\n  animation-delay: 0s;\r\n}\r\n@keyframes lds-spinner {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./loading.spinner.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"lds-spinner\">\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RecipeDetailComponent",
            "id": "component-RecipeDetailComponent-83559187ef83e88590862a296ebd6679109483a597bf21d4a0ea6cfed5132fd5d6bc385def86e0e0d333a23ea805ed2494f7476e2c24f5871c7a348e51d135e6",
            "file": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recipe-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddToShoppingList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-detail',\n  templateUrl: './recipe-detail.component.html',\n  styles: [\n  ]\n})\nexport class RecipeDetailComponent implements OnInit {\n  recipe: Recipe;\n  id: number;\n\n  constructor(private recipeService: RecipeService,\n    private route: ActivatedRoute,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params) => {\n        this.id = +params['id'];\n        this.recipe = this.recipeService.getRecipe(this.id);\n      });\n  }\n\n  onAddToShoppingList() {\n    this.recipeService.addIngredientsToShoppingList(this.recipe.ingredients);\n  }\n\n  onEditRecipe() {\n    // using relative route method\n    // this.router.navigate(['edit'], {relativeTo: this.route});\n    // OR \n    this.router.navigate(['../', this.id, 'edit'], { relativeTo: this.route });\n  }\n\n  onDeleteRecipe() {\n    this.recipeService.deleteRecipe(this.id);\n    this.router.navigate(['/recipes']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <img [src]=\"recipe.imagePath\" alt=\"{{recipe.name}}\" class=\"img-responsive\" style=\"max-height: 250px;\">\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <h1>{{recipe.name}}</h1>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <div class=\"btn-group\" appDropdown>\n            <button type=\"button\" class=\"btn btn-primary dropdown-toggle\">\n                Manage Recipe \n                <span class=\"caret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li style=\"cursor: pointer;\"><a (click)=\"onAddToShoppingList()\" style=\"cursor: pointer;\">Add Ingredients to Shopping List</a></li>\n                <li style=\"cursor: pointer;\"><a (click)=\"onEditRecipe()\">Edit Recipe</a></li>\n                <li style=\"cursor: pointer;\" (click)=\"onDeleteRecipe()\"><a>Delete Recipe</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        {{recipe.description}}\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let ingredient of recipe.ingredients\">\n                {{ingredient.name}} - {{ingredient.amount}}\n            </li>\n        </ul>\n    </div>\n</div>"
        },
        {
            "name": "RecipeEditComponent",
            "id": "component-RecipeEditComponent-a251ebc1dc57cc90cbf505f39c9ac6bc0317cbcb81eb33166c237d1e528986dd3626135f9776d4c445ad1f2affad48ce3e04cd86fbe045b3200124bcdc202baa",
            "file": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-edit",
            "styleUrls": [
                "./recipe-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "recipeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddIngredient",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-edit',\n  templateUrl: './recipe-edit.component.html',\n  styleUrls: ['./recipe-edit.component.css']\n})\nexport class RecipeEditComponent implements OnInit {\n  id: number;\n  editMode = false;\n  recipeForm: FormGroup;\n\n  constructor(private route: ActivatedRoute, \n    private recipeService: RecipeService, \n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params: Params) => {\n        this.id = +params['id'];\n        this.editMode = params['id'] != null;\n        this.initForm();\n      }\n    );\n  }\n\n  private initForm() {\n    let recipeName = '';\n    let recipeImagePath = '';\n    let recipeDescription = '';\n    let recipeIngredients = new FormArray([]);\n\n    if (this.editMode) {\n      const recipe = this.recipeService.getRecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n\n      if (recipe['ingredients']) {\n        recipe.ingredients.map(i => {\n          recipeIngredients.push(\n            new FormGroup({\n              'name': new FormControl(i.name, Validators.required),\n              'amount': new FormControl(i.amount, [Validators.required, Validators.pattern(\"[0-9]+[0-9]*\")])\n            }));\n        });\n      }\n    }\n\n    this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients\n    });\n  }\n\n  onSubmit() {\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value);\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value);\n    }\n    this.onCancel();\n  }\n\n  get controls() { // a getter!\n    return (<FormArray>this.recipeForm.get('ingredients')).controls;\n  }\n\n  onAddIngredient() {\n    (<FormArray>this.recipeForm.get('ingredients')).push(\n      new FormGroup({\n        'name': new FormControl(null, Validators.required),\n        'amount': new FormControl(null, [Validators.required, Validators.pattern(\"[0-9]+[0-9]*\")])\n      })\n    );\n  }\n\n  onCancel() {\n    this.router.navigate(['../'], {relativeTo: this.route});\n  }\n\n  onDeleteIngredient(index: number) {\n    (<FormArray>this.recipeForm.get('ingredients')).removeAt(index);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\ninput.ng-invalid.ng-touched,\r\ntextarea.ng-invalid.ng-touched{\r\n    border: 1px solid red\r\n}",
                    "styleUrl": "./recipe-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            },
            "templateData": "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <form [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <button type=\"submit\" class=\"btn btn-success\" style=\"margin-right: 5px;\" [disabled]=\"!recipeForm.valid\">Save</button>\n                    <button type=\"submit\" class=\"btn btn-danger\"(click)=\"onCancel()\">Cancel</button>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div class=\"form-group\">\n                        <label for=\"name\">Name</label>\n                        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div class=\"form-group\">\n                        <label for=\"name\">Inamge Url</label>\n                        <input type=\"text\" id=\"imagePath\" class=\"form-control\" formControlName=\"imagePath\" #imagePath>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div class=\"form-group\">\n                        <img [src]=\"imagePath.value\" style=\"width: 300px;\" class=\"img-responsive\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div class=\"form-group\">\n                        <label for=\"name\">Description</label>\n                        <textarea type=\"text\" id=\"description\" class=\"form-control\" formControlName=\"description\"\n                            rows=\"6\"></textarea>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\" formArrayName=\"ingredients\">\n                <div class=\"col-xs-12\" >\n                    <div class=\"row\" style=\"margin-bottom: 10px;\" *ngFor=\"let ingredientCtrl of controls; let i = index\" [formGroupName]=\"i\">\n                        <div class=\"col-xs-8\">\n                            <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n                        </div>\n                        <div class=\"col-xs-2\">\n                            <input type=\"number\" class=\"form-control\" formControlName=\"amount\">\n                        </div>\n                        <div class=\"col-xs-2\">\n                            <button class=\"btn btn-danger\" (click)=\"onDeleteIngredient(i)\">X</button>\n                        </div>\n                    </div>\n                    <hr>\n                </div>\n                <div class=\"col-xs-12\">\n                    <button type=\"button\" class=\"btn btn-success\" (click)=\"onAddIngredient()\">Add Ingredient</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>"
        },
        {
            "name": "RecipeItemComponent",
            "id": "component-RecipeItemComponent-ad4a5c1b23732aa57dff5830e3b3992c0e497fea53d90f010fa336980c77675fbb8456b1b13a4cbe704f9cad4bc88542973b2772234386ebf41fd310b864b8ce",
            "file": "src/app/recipes/recipe-item/recipe-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recipe-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Recipe",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-item',\n  templateUrl: './recipe-item.component.html',\n  styles: [\n  ]\n})\nexport class RecipeItemComponent implements OnInit {\n  \n  @Input() recipe: Recipe;\n  @Input() index: number;\n  \n  constructor(private recipeService: RecipeService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a [routerLink]=\"[index]\" routerLinkActive=\"active\" class=\"list-group-item clearfix\" style=\"cursor: pointer;\">\n    <div class=\"pull-left\">\n        <h4 class=\"list-group-item-heading\">{{recipe.name}}</h4>\n        <p class=\"list-gorup-item-text\">{{recipe.description}}</p>\n    </div>\n    <span class=\"pull-right\">\n        <img [src]=\"recipe.imagePath\" alt=\"{{recipe.name}}\" class=\"img-responsive\" style=\"max-height: 50px;\">\n    </span>\n</a>"
        },
        {
            "name": "RecipeListComponent",
            "id": "component-RecipeListComponent-345177d50ba40457712da5158b64059c8804dba6e09e3ecf075478e5a03ae0b7df35cd9b1e2a15d0685199aea933da9941c9158840095c68f8f85fd40f2b7122",
            "file": "src/app/recipes/recipe-list/recipe-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recipe-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataStorageSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "recipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNewRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { DataStorageService } from 'src/app/shared/data-storage.service';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styles: [\n  ]\n})\nexport class RecipeListComponent implements OnInit, OnDestroy {\n  recipes: Recipe[];\n  subscription: Subscription;\n  dataStorageSub: Subscription;\n\n  constructor(private recipeService: RecipeService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private dataStorageService: DataStorageService) { }\n\n  ngOnInit(): void {\n    this.recipes = this.recipeService.getRecipes();\n    this.subscription = this.recipeService.recipesChanged.subscribe(\n      (recipes: Recipe[]) => {\n        this.recipes = recipes;\n      }\n    );\n    //this.dataStorageSub = this.dataStorageService.fetchRecipes().subscribe();\n  }\n\n  onNewRecipe() {\n\n    // relative route method\n    this.router.navigate(['new'], { relativeTo: this.route });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    //this.dataStorageSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <button class=\"btn btn-success\" (click)=\"onNewRecipe()\">New Recipe</button>\r\n    </div>\r\n</div>\r\n<hr>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <app-recipe-item *ngFor=\"let recipeEl of recipes; let i = index\" [recipe]=\"recipeEl\" [index]=\"i\"></app-recipe-item>\r\n    </div>\r\n</div>"
        },
        {
            "name": "RecipesComponent",
            "id": "component-RecipesComponent-945e5563f7576305232333a5871f88345c40016ee1e9afe860f62a151f6e7dd63bb3e00eb094976bc6f53459b6b130f5637c65478c75666355dd7cc3ea803ac8",
            "file": "src/app/recipes/recipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipes",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedRecipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Recipe } from './recipe.model';\nimport { RecipeService } from './recipe.service';\n\n@Component({\n  selector: 'app-recipes',\n  templateUrl: './recipes.component.html',\n  styles: [],\n  providers: [/* RecipeService */]\n})\nexport class RecipesComponent implements OnInit {\n  selectedRecipe: Recipe;\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-5\">\n        <app-recipe-list></app-recipe-list>\n    </div>\n    <div class=\"col-md-7\">\n        <router-outlet></router-outlet>\n    </div>\n</div>"
        },
        {
            "name": "RecipeStartComponent",
            "id": "component-RecipeStartComponent-553de220fffceb31dbb1f997515da427e738b77b717628f65adad3f31f447bba040b421d3d13ef57b0d64425fa9a41b2961174a90f85f4eb0666e1944e155cae",
            "file": "src/app/recipes/recipe-start/recipe-start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-start",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recipe-start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-recipe-start',\n  templateUrl: './recipe-start.component.html',\n  styles: [\n  ]\n})\nexport class RecipeStartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3>Please select a Recipe!!!</h3>"
        },
        {
            "name": "ShoppingEditComponent",
            "id": "component-ShoppingEditComponent-4df4ec6ce8ba1ecd6f1e4be159ffdf4e47cd44c2c9330eaf9a1948771fa383163bce1d97cd632588a699374cc9910fcbac2f3ec51d1ef0fc12805cf7f2572539",
            "file": "src/app/shopping-list/shopping-edit/shopping-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-edit",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./shopping-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editedItemIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "slForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'f', {static: false}"
                        }
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { Ingredient } from 'src/app/shared/ingredient.model';\nimport { ShoppingListService } from '../shopping-list.service';\n\n@Component({\n  selector: 'app-shopping-edit',\n  templateUrl: './shopping-edit.component.html',\n  styles: []\n})\nexport class ShoppingEditComponent implements OnInit, OnDestroy {\n\n  @ViewChild('f', {static: false}) slForm: NgForm;\n\n  subscription: Subscription;\n  editMode = false;\n  editedItemIndex: number;\n  editedItem: Ingredient;\n\n  constructor(private slService: ShoppingListService) { }\n\n  ngOnInit(): void {\n    this.subscription = this.slService.startedEditing.subscribe(\n      (index: number) => {\n        this.editedItemIndex = index;\n        this.editMode = true;\n        this.editedItem = this.slService.getIngredient(index);\n        this.slForm.setValue({\n          name: this.editedItem.name,\n          amount: this.editedItem.amount\n        })\n      });\n  }\n\n  onSubmit(form: NgForm) {\n    const value = form.value;\n    const newIngredient = new Ingredient(value.name, value.amount);\n    if (this.editMode) {\n      this.slService.updateIngredient(this.editedItemIndex, newIngredient);\n    } else {\n      this.slService.addIngredient(newIngredient);\n    }\n    this.editMode = false;\n    form.reset();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  onClear() {\n    this.slForm.reset();\n    this.editMode = false;\n  }\n\n  onDelete() {\n    this.slService.deleteIngredient(this.editedItemIndex);\n    this.onClear();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\n            <div class=\"row\">\n                <div class=\"col-sm-5 form-group\">\n                    <label for=\"name\">Name</label>\n                    <input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" required ngModel>\n                </div>\n                <div class=\"col-sm-2\">\n                    <label for=\"amount\">Amount</label>\n                    <input type=\"number\" id=\"amount\" class=\"form-control\" name=\"amount\" required [pattern]=\"'[0-9]+[0-9]*'\" ngModel>\n                </div>\n            </div>\n            <div class=\"row\" style=\"margin-top: 2px\">\n                <div class=\"col-xs-12\">\n                    <button type=\"submit\" class=\"btn btn-success\" style=\"margin-right: 2px\" \n                        [disabled]=\"f.invalid\"> {{editMode ? 'Update': 'Add'}} </button>\n                    <button type=\"button\" class=\"btn btn-danger\" style=\"margin-right: 2px\" \n                        *ngIf=\"editMode\" (click)=\"onDelete()\">Delete</button>\n                    <button type=\"button\" class=\"btn btn-primary\" style=\"margin-right: 2px\" (click)=\"onClear()\">Clear</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-d5d5dc6204d26c60a9ffa9a223f01a72bfeaa433a6770e900502fac0bc6d48e1d3bf2eff2ee5a377a787de91284fe6a4ec705e819afce0c9e66a0c79b2169ca5",
            "file": "src/app/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { LoggingService } from '../logging.service';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { ShoppingListService } from './shopping-list.service';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styles: [\n  ]\n})\nexport class ShoppingListComponent implements OnInit, OnDestroy {\n  \n  private subscription: Subscription;\n  ingredients: Ingredient[];\n\n  constructor(private slService: ShoppingListService) { }\n\n  ngOnInit(): void {\n    this.ingredients = this.slService.getIngredients();\n    this.subscription = this.slService.ingredientChanged.subscribe(\n      (ingredients: Ingredient []) => {\n        this.ingredients = ingredients;\n      }\n    );\n  }\n\n  ngOnDestroy(): void{\n    this.subscription.unsubscribe();\n  }\n\n  onEditItem(index: number) {\n    this.slService.startedEditing.next(index);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-xs-10\">\n        <app-shopping-edit></app-shopping-edit>\n        <hr>\n        <ul class=\"list-group\">\n            <a class=\"list-group-item\" style=\"cursor: pointer;\"\n            *ngFor=\"let ingredient of ingredients; let i = index\"\n            (click)=\"onEditItem(i)\">\n            {{ingredient.name}}  ({{ingredient.amount}})\n        </a>\n        </ul>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-f0815a2eda21136f31beb9343e76cbbb869d8516ba6b1aef5a45ea6dcb610522cde47a4b7440188e660d6cd88b1468153bb32d6e1e70d9d7d1e51fef6e773abf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { AppConstant } from './shared/app-constant';\nimport { HttpClientModule } from '@angular/common/http'\nimport { SharedModule } from './shared/shared.module';\nimport { CoreModule } from './core.module';\nimport { ServiceConstants } from './shared/service-constants';\n\n@NgModule({\n  declarations: [\n    /* RecipesComponent,\n    RecipeListComponent,\n    RecipeDetailComponent,\n    RecipeItemComponent,\n    RecipeEditComponent,\n    RecipeStartComponent, */\n    /* ShoppingListComponent,\n    ShoppingEditComponent, */\n    /* DropdownDirective,\n    LoadingSpinnerComponent,\n    AlertComponent, */\n    AppComponent,\n    HeaderComponent\n  ],\n  imports: [\n    /* FormsModule,\n    ReactiveFormsModule, */\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    /* RecipesModule, */\n    /* ShoppingListModule, */\n    /* AuthModule, */\n    SharedModule,\n    CoreModule\n  ],\n  providers: [\n    AppConstant,\n    ServiceConstants,\n    /* ShoppingListService, \n    RecipeService, */\n    /* DataStorageService,  */\n    /* {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true} */\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ce363314f44c1509c47a67cf31816d088b64d515eaeec2b21f0d6ee23b3e2ce97336e42b483c2fce9156d36fd4a717a58f1a459644b3f067bc588ec8de40fac9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\n\nconst appRoutes: Routes = [\n  { path: '', redirectTo: '/recipes', pathMatch: 'full' },\n  /* {\n    path: 'recipes', component: RecipesComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: '', component: RecipeStartComponent },\n      { path: 'new', component: RecipeEditComponent },\n      { path: ':id', component: RecipeDetailComponent, resolve: [RecipesResolverService] },\n      { path: ':id/edit', component: RecipeEditComponent, resolve: [RecipesResolverService] }\n    ]\n  },\n  { path: 'shopping-list', component: ShoppingListComponent }, */\n  /* { path: 'auth', component: AuthComponent } */\n  \n  // ==================== Lazy Loading implementation Started ================================== //\n  { path: 'recipes', loadChildren: () => \"import('./recipes/recipes.module').then(m => m.RecipesModule)\" },\n  { path: 'shopping-list', loadChildren: () => \"import('./shopping-list/shopping-list.module').then(m => m.ShoppingListModule)\" },\n  { path: 'auth', loadChildren: () => \"import('./auth/auth.module').then(m => m.AuthModule)\" }\n  // ==================== Lazy Loading implementation Completed ================================ //\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes, {preloadingStrategy: PreloadAllModules})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n}\n\n/**\n * lazyLoading -> As we have defined lazy loading we will bundle the modules seperately \n * and load it when needed and not before when needed.\n * \n * preloadingStrategy -> As we have defined lazy loading so the bundles will be seperate but\n * due to preloading it will load the bundles defined at the initial point only \n * so that it wont have to load again and again.\n */",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-fa581ad0e26dbbee6636486f70b83947a971f07a416bc9da4975cfafd2d971594dc3a340101dc8ff00fb82e05184013fee9a57800ac6524476f92004d3cce739",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\n@NgModule({\r\n    declarations: [AuthComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        RouterModule.forChild([\r\n            { path: '', component: AuthComponent }\r\n        ]),\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-605bc3f5e22a5ad09e4581584afe40a08521bbcaaa9af30d1b5b1a61149ceebe5f0003d4f8da1cc0019604adc717641482e0dbe6588f4055a2f5430e6b646e70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core.module.ts",
            "methods": [],
            "sourceCode": "import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AuthInterceptorService } from \"./auth/auth.interceptor.service\";\r\nimport { RecipeService } from \"./recipes/recipe.service\";\r\nimport { ShoppingListService } from \"./shopping-list/shopping-list.service\";\r\n\r\n@NgModule({\r\n    providers: [\r\n        ShoppingListService,\r\n        RecipeService,\r\n        {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}\r\n    ]\r\n})\r\nexport class CoreModule {\r\n\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptorService"
                        },
                        {
                            "name": "RecipeService"
                        },
                        {
                            "name": "ShoppingListService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesModule",
            "id": "module-RecipesModule-dd750ad668446c6f4d396354a1177b67ec24338718d621c909222a959a25dbe41d960acac600ba135819147667490f43642401633a118cede1f5d43afefbad14",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { RecipeDetailComponent } from \"./recipe-detail/recipe-detail.component\";\r\nimport { RecipeEditComponent } from \"./recipe-edit/recipe-edit.component\";\r\nimport { RecipeItemComponent } from \"./recipe-item/recipe-item.component\";\r\nimport { RecipeListComponent } from \"./recipe-list/recipe-list.component\";\r\nimport { RecipeStartComponent } from \"./recipe-start/recipe-start.component\";\r\nimport { RecipesRoutingModule } from \"./recipes-routing.module\";\r\nimport { RecipesComponent } from \"./recipes.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        RecipesComponent,\r\n        RecipeListComponent,\r\n        RecipeDetailComponent,\r\n        RecipeItemComponent,\r\n        RecipeEditComponent,\r\n        RecipeStartComponent\r\n    ],\r\n    imports: [\r\n        RouterModule,\r\n        ReactiveFormsModule,\r\n        RecipesRoutingModule,\r\n        SharedModule\r\n    ]\r\n    /* ,exports: [\r\n        RecipesComponent,\r\n        RecipeListComponent,\r\n        RecipeDetailComponent,\r\n        RecipeItemComponent,\r\n        RecipeEditComponent,\r\n        RecipeStartComponent\r\n    ] */\r\n})\r\nexport class RecipesModule {\r\n\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecipeDetailComponent"
                        },
                        {
                            "name": "RecipeEditComponent"
                        },
                        {
                            "name": "RecipeItemComponent"
                        },
                        {
                            "name": "RecipeListComponent"
                        },
                        {
                            "name": "RecipeStartComponent"
                        },
                        {
                            "name": "RecipesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecipesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesRoutingModule",
            "id": "module-RecipesRoutingModule-83291135f5c92a9ba435c320f740d072d6818dc5c4ee7b30584c90dbd945e3e3071351d2c8c26dcc03dfff39f579d5fb0b12f7d3fb420d4a53277f7e34ee736d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { AuthGuard } from \"../auth/auth.guard\";\r\nimport { RecipeDetailComponent } from \"./recipe-detail/recipe-detail.component\";\r\nimport { RecipeEditComponent } from \"./recipe-edit/recipe-edit.component\";\r\nimport { RecipeStartComponent } from \"./recipe-start/recipe-start.component\";\r\nimport { RecipesResolverService } from \"./recipes-resolver.service\";\r\nimport { RecipesComponent } from \"./recipes.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: RecipesComponent,\r\n        canActivate: [AuthGuard],\r\n        children: [\r\n            { path: '', component: RecipeStartComponent },\r\n            { path: 'new', component: RecipeEditComponent },\r\n            { path: ':id', component: RecipeDetailComponent, resolve: [RecipesResolverService] },\r\n            { path: ':id/edit', component: RecipeEditComponent, resolve: [RecipesResolverService] }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class RecipesRoutingModule {\r\n\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-3782c72e83788893d77efb4281cf50e125e8c46e11a5501579fc88964b0b02cc706b8e54da1c1169e62fb7b361dc47ddc49fd60b11db4e8c2ddcd2f0713033b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AlertComponent } from \"./alert/alert.component\";\r\nimport { DropdownDirective } from \"./dropdown.directive\";\r\nimport { LoadingSpinnerComponent } from \"./loading-spinner/loading-spinner\";\nimport { GetNameComponent } from './get-name/get-name.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AlertComponent,\r\n        LoadingSpinnerComponent,\r\n        DropdownDirective,\r\n        GetNameComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        AlertComponent,\r\n        LoadingSpinnerComponent,\r\n        DropdownDirective,\r\n        CommonModule\r\n    ],\r\n    entryComponents: [/* AlertComponent */]\r\n})\r\nexport class SharedModule {\r\n\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "GetNameComponent"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListModule",
            "id": "module-ShoppingListModule-a506b771a6d129aec495dca5afc6e6dcdee5037331190a477206782868db7e5af96c5c1553f95405482c1eeeef308bb64ce4ba25e8f854d559e61089a4d0d901",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping-list/shopping-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { ShoppingEditComponent } from \"./shopping-edit/shopping-edit.component\";\r\nimport { ShoppingListComponent } from \"./shopping-list.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShoppingListComponent,\r\n        ShoppingEditComponent,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: '', component: ShoppingListComponent },\r\n        ]),\r\n        FormsModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class ShoppingListModule {\r\n\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingEditComponent"
                        },
                        {
                            "name": "ShoppingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "ExampleStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/get-name/get-name.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "someFunction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/get-name/get-name.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(valuePropertyA: String, valuePropertyB: String) => {\r\n    // Makes some computations and returns something\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/get-name/get-name.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => {\r\n    const { propertyA, propertyB } = args;\r\n\r\n    //👇 Assigns the function result to a variable\r\n    const someFunctionResult = someFunction(propertyA, propertyB);\r\n\r\n    return {\r\n        props: {\r\n            ...args,\r\n            someProperty: someFunctionResult,\r\n        },\r\n    };\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/get-name/get-name.stories.ts": [
                {
                    "name": "ExampleStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/get-name/get-name.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "someFunction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/get-name/get-name.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(valuePropertyA: String, valuePropertyB: String) => {\r\n    // Makes some computations and returns something\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/get-name/get-name.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => {\r\n    const { propertyA, propertyB } = args;\r\n\r\n    //👇 Assigns the function result to a variable\r\n    const someFunctionResult = someFunction(propertyA, propertyB);\r\n\r\n    return {\r\n        props: {\r\n            ...args,\r\n            someProperty: someFunctionResult,\r\n        },\r\n    };\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/recipes",
                        "pathMatch": "full"
                    },
                    {
                        "path": "recipes",
                        "loadChildren": "./recipes/recipes.module#RecipesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/recipes/recipes-routing.module.ts",
                                        "module": "RecipesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RecipesComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "RecipeStartComponent"
                                                    },
                                                    {
                                                        "path": "new",
                                                        "component": "RecipeEditComponent"
                                                    },
                                                    {
                                                        "path": ":id",
                                                        "component": "RecipeDetailComponent",
                                                        "resolve": [
                                                            "RecipesResolverService"
                                                        ]
                                                    },
                                                    {
                                                        "path": ":id/edit",
                                                        "component": "RecipeEditComponent",
                                                        "resolve": [
                                                            "RecipesResolverService"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RecipesModule"
                            }
                        ]
                    },
                    {
                        "path": "shopping-list",
                        "loadChildren": "./shopping-list/shopping-list.module#ShoppingListModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ShoppingListModule"
                            }
                        ]
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "AuthModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponseData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateResponseData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/user.modal.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/logging.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggingService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-item/recipe-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-list/recipe-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-start/recipe-start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeStartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecipeService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RecipesResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/app-constant.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConstant",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/get-name/get-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GetNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/get-name/get-name.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/get-name/get-name.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "someFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/get-name/get-name.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ingredient.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/loading-spinner/loading-spinner.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/service-constants.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServiceConstants",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-edit/shopping-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}